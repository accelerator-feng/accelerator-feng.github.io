<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>和光同尘</title>
  <subtitle>前端小白的学习笔记</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.yinfengblog.com/"/>
  <updated>2017-02-19T12:24:34.880Z</updated>
  <id>http://www.yinfengblog.com/</id>
  
  <author>
    <name>Yin Feng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ES6学习笔记（一）</title>
    <link href="http://www.yinfengblog.com/ES6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://www.yinfengblog.com/ES6学习笔记/</id>
    <published>2017-02-05T05:27:55.000Z</published>
    <updated>2017-02-19T12:24:34.880Z</updated>
    
    <content type="html"><![CDATA[<p>最近在学习阮一峰著《ECMAScript 6 入门》，根据<em>自己的学习情况</em>进行了整理，方便查找复习。<br><a id="more"></a> </p>
<h2 id="let命令"><a href="#let命令" class="headerlink" title="let命令"></a>let命令</h2><p>ES6提出了两个新的声明变量的命令：let和const。其中，let完全可以取代var，因为两者语义相同，而且let没有副作用。</p>
<h2 id="const命令"><a href="#const命令" class="headerlink" title="const命令"></a>const命令</h2><p>在let和const之间，建议优先使用const，尤其是在全局环境，不应该设置变量，只应设置常量。</p>
<p>const优于let有几个原因。一个是const可以提醒阅读程序的人，这个变量不应该改变；另一个是const比较符合函数式编程思想，运算不改变值，只是新建值，而且这样也有利于将来的分布式运算；最后一个原因是 JavaScript 编译器会对const进行优化，所以多使用const，有利于提供程序的运行效率，也就是说let和const的本质区别，其实是编译器内部的处理不同。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> a = <span class="number">1</span>, b = <span class="number">2</span>, c = <span class="number">3</span>;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">const</span> a = <span class="number">1</span>;</div><div class="line"><span class="keyword">const</span> b = <span class="number">2</span>;</div><div class="line"><span class="keyword">const</span> c = <span class="number">3</span>;</div><div class="line"></div><div class="line"><span class="comment">// best</span></div><div class="line"><span class="keyword">const</span> [a, b, c] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</div></pre></td></tr></table></figure></p>
<p>所有的函数都应该设置为常量。</p>
<h2 id="变量的解构赋值"><a href="#变量的解构赋值" class="headerlink" title="变量的解构赋值"></a>变量的解构赋值</h2><p>使用数组成员对变量赋值时，优先使用解构赋值。<br>函数的参数如果是对象的成员，优先使用解构赋值。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFullName</span>(<span class="params">user</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> firstName = user.firstName;</div><div class="line">  <span class="keyword">const</span> lastName = user.lastName;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFullName</span>(<span class="params">obj</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> &#123; firstName, lastName &#125; = obj;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// best</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFullName</span>(<span class="params">&#123; firstName, lastName &#125;</span>) </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果函数返回多个值，优先使用对象的解构赋值，而不是数组的解构赋值。这样便于以后添加返回值，以及更改返回值的顺序。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">processInput</span>(<span class="params">input</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> [left, right, top, bottom];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">processInput</span>(<span class="params">input</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> &#123; left, right, top, bottom &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> &#123; left, right &#125; = processInput(input);</div></pre></td></tr></table></figure></p>
<h2 id="字符串的扩展"><a href="#字符串的扩展" class="headerlink" title="字符串的扩展"></a>字符串的扩展</h2><h3 id="includes-startsWith-endsWith"><a href="#includes-startsWith-endsWith" class="headerlink" title="includes(),startsWith(),endsWith()"></a>includes(),startsWith(),endsWith()</h3><ul>
<li>includes()：返回布尔值，表示是否找到了参数字符串。</li>
<li>startsWith()：返回布尔值，表示参数字符串是否在源字符串的头部。</li>
<li>endsWith()：返回布尔值，表示参数字符串是否在源字符串的尾部。<br>这三个方法都支持第二个参数，表示开始搜索的位置。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> s = <span class="string">'Hello world!'</span>;</div><div class="line"></div><div class="line">s.startsWith(<span class="string">'world'</span>, <span class="number">6</span>) <span class="comment">// true</span></div><div class="line">s.endsWith(<span class="string">'Hello'</span>, <span class="number">5</span>) <span class="comment">// true</span></div><div class="line">s.includes(<span class="string">'Hello'</span>, <span class="number">6</span>) <span class="comment">// false</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>上面代码表示，使用第二个参数n时，endsWith的行为与其他两个方法有所不同。它针对前n个字符，而其他两个方法针对从第n个位置直到字符串结束。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### padStart(),padEnd()</div><div class="line">padStart的常见用途是为数值补全指定位数。</div><div class="line">另一个用途是提示字符串格式。</div><div class="line">```javascript</div><div class="line">&apos;12&apos;.padStart(10, &apos;YYYY-MM-DD&apos;) // &quot;YYYY-MM-12&quot;</div><div class="line">&apos;09-12&apos;.padStart(10, &apos;YYYY-MM-DD&apos;) // &quot;YYYY-09-12&quot;</div></pre></td></tr></table></figure>
<h3 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h3><p>静态字符串一律使用单引号或反引号，不使用双引号。动态字符串使用反引号。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#result'</span>).append(<span class="string">`</span></div><div class="line">  There are &lt;b&gt;<span class="subst">$&#123;basket.count&#125;</span>&lt;/b&gt; items</div><div class="line">   in your basket, &lt;em&gt;<span class="subst">$&#123;basket.onSale&#125;</span>&lt;/em&gt;</div><div class="line">  are on sale!</div><div class="line">`);</div></pre></td></tr></table></figure></p>
<h2 id="正则的扩展"><a href="#正则的扩展" class="headerlink" title="正则的扩展"></a>正则的扩展</h2><h3 id="y修饰符"><a href="#y修饰符" class="headerlink" title="y修饰符"></a>y修饰符</h3><p>“粘连”修饰符<br>y修饰符号隐含了头部匹配的标志^。<br>y修饰符的设计本意，就是让头部匹配的标志^在全局匹配中都有效。</p>
<h3 id="后行断言"><a href="#后行断言" class="headerlink" title="后行断言"></a>后行断言</h3><p>目前，有一个提案，在ES7加入后行断言。V8引擎4.9版已经支持，Chrome浏览器49版打开”experimental JavaScript features“开关（地址栏键入about:flags），就可以使用这项功能。</p>
<p>“后行断言”正好与”先行断言”相反，x只有在y后面才匹配，必须写成<code>/(?&lt;=y)x/</code>。比如，只匹配美元符号之后的数字，要写成<code>/(?&lt;=\$)\d+/</code>。”后行否定断言“则与”先行否定断言“相反，x只有不在y后面才匹配，必须写成<code>/(?&lt;!y)x/</code>。比如，只匹配不在美元符号后面的数字，要写成<code>/(?&lt;!\$)\d+/</code>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/(?&lt;=\$)\d+/.exec('Benjamin Franklin is on the $100 bill')  // ["100"]</div><div class="line">/(?&lt;!\$)\d+/.exec('it’s is worth about €90')                // ["90"]</div></pre></td></tr></table></figure>
<p>“后行断言”的组匹配，与正常情况下结果是不一样的。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/(?&lt;=(\d+)(\d+))$/.exec('1053') // ["", "1", "053"]</div><div class="line">/^(\d+)(\d+)$/.exec('1053') // ["1053", "105", "3"]</div></pre></td></tr></table></figure></p>
<p>上面代码中，需要捕捉两个组匹配。没有”后行断言”时，第一个括号是贪婪模式，第二个括号只能捕获一个字符，所以结果是105和3。而”后行断言”时，由于执行顺序是从右到左，第二个括号是贪婪模式，第一个括号只能捕获一个字符，所以结果是1和053。</p>
<p>其次，”后行断言”的反斜杠引用，也与通常的顺序相反，必须放在对应的那个括号之前。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/(?&lt;=(o)d\1)r/.exec('hodor')  // null</div><div class="line">/(?&lt;=\1d(o))r/.exec('hodor')  // ["r", "o"]</div></pre></td></tr></table></figure></p>
<p>上面代码中，如果后行断言的反斜杠引用（\1）放在括号的后面，就不会得到匹配结果，必须放在前面才可以。</p>
<h2 id="数值的扩展"><a href="#数值的扩展" class="headerlink" title="数值的扩展"></a>数值的扩展</h2><h3 id="Math对象的扩展"><a href="#Math对象的扩展" class="headerlink" title="Math对象的扩展"></a>Math对象的扩展</h3><ul>
<li>Math.trunc方法用于去除一个数的小数部分，返回整数部分。</li>
<li>Math.sign方法用来判断一个数到底是正数、负数、还是零。</li>
<li>Math.cbrt方法用于计算一个数的立方根。</li>
</ul>
<h2 id="数组的扩展"><a href="#数组的扩展" class="headerlink" title="数组的扩展"></a>数组的扩展</h2><h3 id="Array-from"><a href="#Array-from" class="headerlink" title="Array.from()"></a>Array.from()</h3><p>Array.from方法用于将两类对象转为真正的数组：类似数组的对象（array-like object）和可遍历（iterable）的对象（包括ES6新增的数据结构Set和Map）。</p>
<p>扩展运算符（…）也可以将某些数据结构转为数组。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// arguments对象</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> args = [...arguments];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// NodeList对象</span></div><div class="line">[...document.querySelectorAll(<span class="string">'div'</span>)]</div></pre></td></tr></table></figure></p>
<p>扩展运算符背后调用的是遍历器接口（Symbol.iterator），如果一个对象没有部署这个接口，就无法转换。Array.from方法则是还支持类似数组的对象。所谓类似数组的对象，本质特征只有一点，即必须有length属性。因此，任何有length属性的对象，都可以通过Array.from方法转为数组，而此时扩展运算符就无法转换。</p>
<h3 id="数组实例的find-和findIndex"><a href="#数组实例的find-和findIndex" class="headerlink" title="数组实例的find()和findIndex()"></a>数组实例的find()和findIndex()</h3><p>数组实例的find方法，用于找出第一个符合条件的数组成员。它的参数是一个回调函数，所有数组成员依次执行该回调函数，直到找出第一个返回值为true的成员，然后返回该成员。如果没有符合条件的成员，则返回undefined。</p>
<p>数组实例的findIndex方法的用法与find方法非常类似，返回第一个符合条件的数组成员的位置，如果所有成员都不符合条件，则返回-1。</p>
<h3 id="数组实例的fill"><a href="#数组实例的fill" class="headerlink" title="数组实例的fill()"></a>数组实例的fill()</h3><p>fill方法使用给定值，填充一个数组。</p>
<h3 id="数组实例的entries-keys-和values"><a href="#数组实例的entries-keys-和values" class="headerlink" title="数组实例的entries(),keys()和values()"></a>数组实例的entries(),keys()和values()</h3><p>ES6提供三个新的方法——entries()，keys()和values()——用于遍历数组。它们都返回一个遍历器对象，可以用for…of循环进行遍历，唯一的区别是keys()是对键名的遍历、values()是对键值的遍历，entries()是对键值对的遍历。</p>
<h3 id="数组实例的includes"><a href="#数组实例的includes" class="headerlink" title="数组实例的includes()"></a>数组实例的includes()</h3><p>Array.prototype.includes方法返回一个布尔值，表示某个数组是否包含给定的值，与字符串的includes方法类似。该方法属于ES7，但Babel转码器已经支持。</p>
<h2 id="函数的扩展"><a href="#函数的扩展" class="headerlink" title="函数的扩展"></a>函数的扩展</h2><h3 id="函数参数的默认值"><a href="#函数参数的默认值" class="headerlink" title="函数参数的默认值"></a>函数参数的默认值</h3><p>如果参数默认值是变量，那么参数就不是传值的，而是每次都重新计算默认值表达式的值。也就是说，参数默认值是惰性求值的。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fetch</span>(<span class="params">url, &#123; body = <span class="string">''</span>, method = <span class="string">'GET'</span>, headers = &#123;&#125; &#125;</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(method);</div><div class="line">&#125;</div><div class="line"></div><div class="line">fetch(<span class="string">'http://example.com'</span>, &#123;&#125;)</div><div class="line"><span class="comment">// "GET"</span></div><div class="line"></div><div class="line">fetch(<span class="string">'http://example.com'</span>)</div><div class="line"><span class="comment">// 报错</span></div></pre></td></tr></table></figure></p>
<p>上面代码中，如果函数fetch的第二个参数是一个对象，就可以为它的三个属性设置默认值。</p>
<p>上面的写法不能省略第二个参数，如果结合函数参数的默认值，就可以省略第二个参数。这时，就出现了双重默认值。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fetch</span>(<span class="params">url, &#123; method = <span class="string">'GET'</span> &#125; = &#123;&#125;</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(method);</div><div class="line">&#125;</div><div class="line"></div><div class="line">fetch(<span class="string">'http://example.com'</span>)</div><div class="line"><span class="comment">// "GET"</span></div></pre></td></tr></table></figure></p>
<h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p>一旦设置了参数的默认值，函数进行声明初始化时，参数会形成一个单独的作用域（context）。等到初始化结束，这个作用域就会消失。这种语法行为，在不设置参数默认值时，是不会出现的。</p>
<h3 id="rest参数"><a href="#rest参数" class="headerlink" title="rest参数"></a>rest参数</h3><p>ES6 引入 rest 参数（形式为“…变量名”），用于获取函数的多余参数，这样就不需要使用arguments对象了。rest 参数搭配的变量是一个数组，该变量将多余的参数放入数组中</p>
<h3 id="扩展运算符"><a href="#扩展运算符" class="headerlink" title="扩展运算符"></a>扩展运算符</h3><p>扩展运算符（spread）是三个点（…）。它好比 rest 参数的逆运算，将一个数组转为用逗号分隔的参数序列。</p>
<h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><p>（1）函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。</p>
<p>（2）不可以当作构造函数，也就是说，不可以使用new命令，否则会抛出一个错误。</p>
<p>（3）不可以使用arguments对象，该对象在函数体内不存在。如果要用，可以用Rest参数代替。</p>
<p>（4）不可以使用yield命令，因此箭头函数不能用作Generator函数。<br>箭头函数转成ES5的代码如下<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ES6</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'id:'</span>, <span class="keyword">this</span>.id);</div><div class="line">  &#125;, <span class="number">100</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// ES5</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> _this = <span class="keyword">this</span>;</div><div class="line"></div><div class="line">  setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'id:'</span>, _this.id);</div><div class="line">  &#125;, <span class="number">100</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="绑定this"><a href="#绑定this" class="headerlink" title="绑定this"></a>绑定this</h3><p>函数绑定运算符是并排的两个双冒号（::），双冒号左边是一个对象，右边是一个函数。该运算符会自动将左边的对象，作为上下文环境（即this对象），绑定到右边的函数上面。</p>
<h3 id="尾调用优化"><a href="#尾调用优化" class="headerlink" title="尾调用优化"></a>尾调用优化</h3><p>只有不再用到外层函数的内部变量，内层函数的调用帧才会取代外层函数的调用帧，否则就无法进行“尾调用优化”。<br>ES6的尾调用优化只在严格模式下开启，正常模式是无效的。</p>
<h3 id="尾递归"><a href="#尾递归" class="headerlink" title="尾递归"></a>尾递归</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">n, total = <span class="number">1</span></span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (n === <span class="number">1</span>) <span class="keyword">return</span> total;</div><div class="line">  <span class="keyword">return</span> factorial(n - <span class="number">1</span>, n * total);</div><div class="line">&#125;</div><div class="line"></div><div class="line">factorial(<span class="number">5</span>) <span class="comment">// 120</span></div></pre></td></tr></table></figure>
<h2 id="对象的扩展"><a href="#对象的扩展" class="headerlink" title="对象的扩展"></a>对象的扩展</h2><h3 id="Object-is"><a href="#Object-is" class="headerlink" title="Object.is()"></a>Object.is()</h3><p><code>Object.is(NaN, NaN) // true</code></p>
<h3 id="Objects-assign"><a href="#Objects-assign" class="headerlink" title="Objects.assign()"></a>Objects.assign()</h3><p>Object.assign方法用于对象的合并，将源对象（source）的所有可枚举属性，复制到目标对象（target）<br>对象尽量静态化，一旦定义，就不得随意添加新的属性。如果添加属性不可避免，要使用Object.assign方法。</p>
<ol>
<li><p>合并多个对象<br>将多个对象合并到某个对象。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> merge =</div><div class="line">  <span class="function">(<span class="params">target, ...sources</span>) =&gt;</span> <span class="built_in">Object</span>.assign(target, ...sources);</div></pre></td></tr></table></figure>
</li>
<li><p>为属性指定默认值</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> DEFAULTS = &#123;</div><div class="line">  <span class="attr">logLevel</span>: <span class="number">0</span>,</div><div class="line">  <span class="attr">outputFormat</span>: <span class="string">'html'</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">processContent</span>(<span class="params">options</span>) </span>&#123;</div><div class="line">  options = <span class="built_in">Object</span>.assign(&#123;&#125;, DEFAULTS, options);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>由于存在深拷贝的问题，DEFAULTS对象和options对象的所有属性的值，都只能是简单类型，而不能指向另一个对象。否则，将导致DEFAULTS对象的该属性不起作用。</p>
<h3 id="属性的遍历"><a href="#属性的遍历" class="headerlink" title="属性的遍历"></a>属性的遍历</h3><p>ES6一共有5种方法可以遍历对象的属性。</p>
<p>（1）for…in</p>
<p>for…in循环遍历对象自身的和继承的可枚举属性（不含Symbol属性）。</p>
<p>（2）Object.keys(obj)</p>
<p>Object.keys返回一个数组，包括对象自身的（不含继承的）所有可枚举属性（不含Symbol属性）。</p>
<p>（3）Object.getOwnPropertyNames(obj)</p>
<p>Object.getOwnPropertyNames返回一个数组，包含对象自身的所有属性（不含Symbol属性，但是包括不可枚举属性）。</p>
<p>（4）Object.getOwnPropertySymbols(obj)</p>
<p>Object.getOwnPropertySymbols返回一个数组，包含对象自身的所有Symbol属性。</p>
<p>（5）Reflect.ownKeys(obj)</p>
<p>Reflect.ownKeys返回一个数组，包含对象自身的所有属性，不管是属性名是Symbol或字符串，也不管是否可枚举。</p>
<p>以上的5种方法遍历对象的属性，都遵守同样的属性遍历的次序规则。</p>
<ul>
<li>首先遍历所有属性名为数值的属性，按照数字排序。</li>
<li>其次遍历所有属性名为字符串的属性，按照生成时间排序。</li>
<li>最后遍历所有属性名为Symbol值的属性，按照生成时间排序。</li>
</ul>
<h3 id="Object-setPrototypeOf"><a href="#Object-setPrototypeOf" class="headerlink" title="Object.setPrototypeOf()"></a>Object.setPrototypeOf()</h3><p>Object.setPrototypeOf方法用来设置一个对象的prototype对象。它是ES6正式推荐的设置原型对象的方法。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在学习阮一峰著《ECMAScript 6 入门》，根据&lt;em&gt;自己的学习情况&lt;/em&gt;进行了整理，方便查找复习。&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.yinfengblog.com/categories/JavaScript/"/>
    
    
      <category term="ES6" scheme="http://www.yinfengblog.com/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>学习前端跨域解决方案</title>
    <link href="http://www.yinfengblog.com/%E5%AD%A6%E4%B9%A0%E5%89%8D%E7%AB%AF%E8%B7%A8%E5%9F%9F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>http://www.yinfengblog.com/学习前端跨域解决方案/</id>
    <published>2017-01-28T12:21:39.000Z</published>
    <updated>2017-02-19T12:31:31.697Z</updated>
    
    <content type="html"><![CDATA[<p>结合自己之前demo中的Ajax来学习几种前端跨域方法。<br><a id="more"></a> </p>
<h1 id="跨域问题由来"><a href="#跨域问题由来" class="headerlink" title="跨域问题由来"></a>跨域问题由来</h1><p> 前端处于项目开发过程中最接近用户的一个区域，代码最容易被hack获取解析，也最容易受到攻击。<br>因此，通过XHR实现Ajax通信的一个主要限制，来源于同源策略：浏览器限制脚本中发起的跨站请求，<br>要求JavaScript或cookie只能访问同源的资源。<br>这里的同源指的是域名，协议名，以及端口号相同。</p>
<h1 id="跨域解决方案"><a href="#跨域解决方案" class="headerlink" title="跨域解决方案"></a>跨域解决方案</h1><p>JS里实现跨域的几种方法：CORS（跨域资源共享）、JSONP、cross-document messaging（跨文档消息传递）、Web Sockets、<br>iframe跨域以及服务器代理。<br>这里先总结CORS和JSONP。</p>
<h2 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h2><p>CORS是W3C推荐的一个让Web应用服务器能支持跨域访问控制，从而使得安全地进行跨域数据传输的标准。CORS背后的基本思想，<br>就是使用自定义的HTTP头部让浏览器与服务器进行沟通，从而决定请求或响应是应该成功，还是应该失败。</p>
<p>使用CORS跨域的时候和普通的AJAX过程是一样的。浏览器一但发现AJAX请求跨域资源，就会自动添加一些请求头帮助我们处理一些事情。所以说只要服务端提供CORS支持，前端不需要做额外的事情。</p>
<p>CORS请求分两种，简单请求和非简单请求。</p>
<h3 id="简单请求"><a href="#简单请求" class="headerlink" title="简单请求"></a>简单请求</h3><p>简单请求满足的条件：</p>
<p>（1） 请求方法是以下三种方法之一：</p>
<ul>
<li>HEAD</li>
<li>GET</li>
<li>POST</li>
</ul>
<p>（2）HTTP的头信息不超出以下几种字段：</p>
<ul>
<li>Accept</li>
<li>Accept-Language</li>
<li>Content-Language</li>
<li>Last-Event-ID</li>
<li>Content-Type：只限于三个值application/x-www-form-urlencoded、multipart/form-data、text/plain</li>
</ul>
<p>（3）不使用自定义请求头</p>
<p>简单请求与同源时发送的请求差不多，不过在服务器端要明确Access-Control-Allow-Origin字段的值，以使请求的数据顺利返回客户端。</p>
<p>另外，客户端发现Ajax发送的是跨域请求，会在请求头中自动添加一个Origin字段。</p>
<p>结合之前自己做的demo，利用维基百科的API查询维基百科条目，请求的数据顺利返回，部分头部信息如下：<br><img src="http://p1.bqimg.com/582196/72d864ff72ede8a3.png"></p>
<p>Access-Control-Allow-Origin: 该字段为必需字段，可以是指定的源名（协议+域名+端口），也可以使用通配符*代表接受所有跨域资源请求。<br>如果没有这个头部，或者有这个头部但源信息不匹配，浏览器就会驳回请求。</p>
<h3 id="非简单请求"><a href="#非简单请求" class="headerlink" title="非简单请求"></a>非简单请求</h3><p>非简单请求，会在正式通信之前，增加一次HTTP查询请求，称为”预检”请求（preflight）。这种请求使用OPTIONS方法，发送<br>这个请求后，服务器可以决定是否允许这种类型的请求。如果是才真正发送指定方式的请求。</p>
<p>结合自己的另一个<a href="http://yinfengblog.com/Random-Quote-Machine/" target="_blank" rel="external">demo</a>，部分代码及头部信息如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$.ajax(&#123;</div><div class="line">    <span class="attr">headers</span>: &#123; <span class="string">"X-Mashape-Key"</span>: <span class="string">"MLHtOdrnY5mshXxPTKg6YoqX0LBPp1Ywu3mjsnj8236K9zbKiI"</span> &#125;,</div><div class="line">    <span class="attr">url</span>: <span class="string">'https://andruxnet-random-famous-quotes.p.mashape.com/cat='</span>,</div><div class="line">    <span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</div><div class="line">        <span class="comment">// 请求成功后的处理</span></div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><img src="http://i1.piimg.com/582196/7caa3db0ba1819c4.png"><br><img src="http://p1.bqimg.com/582196/06e897781a55c7d2.png"></p>
<ul>
<li><p>Access-Control-Allow-Methods: 指明请求的可用方式有哪些(一个或者多个，不同方法之间用英文逗号隔开)。这个响应头信息作为对客户端发出的预检请求中Access-Control-Request-Method的回复，必含。 </p>
</li>
<li><p>Access-Control-Allow-Headers: 在响应预检请求的时候使用。用来指明在实际的请求中，可以使用哪些自定义HTTP请求头，那么在客户端发送请求时就可以加上这些可以使用的自定义请求头。</p>
</li>
<li><p>Access-Control-Request-Headers: 在发出预检请求时带有这个头信息，告诉服务器在实际请求时会携带的自定义头信息。如有多个，可以用逗号分开。<br><strong>在这个例子中为x-masshape-key，是在JS代码中指定的自定义的头信息，这里是使用这个公共API的APPKey的名字。</strong></p>
</li>
<li><p>Access-Control-Request-Mrthod: 在发出预检请求时带有这个头信息,告诉服务器在实际请求时会使用的请求方式。</p>
</li>
<li><p>Origin: 表明发送请求或者预检请求的域，值是一个URI，告诉服务器端,请求来自哪里。它不包含任何路径信息，只是协议 + 域名 + 端口。Origin的值也可以是一个空字符串。<br><strong>在这里与Access-Control-Allow-Origin值一样，为博客地址，可以说预检请求通过了，可以发送实际请求。</strong></p>
</li>
</ul>
<p>Preflight请求结束后，结果将按照响应中指定的时间缓存起来。以后每次浏览器正常的CORS（跨域）请求，就都跟简单请求一样，会有一个Origin头信息字段。服务器的回应，也都会有一个Access-Control-Allow-Origin头信息字段。</p>
<p>实际请求：<br><img src="http://i1.piimg.com/582196/a3e7cb96dda319d2.png"><br><img src="http://i1.piimg.com/582196/42dcbd40a3c28129.png"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;结合自己之前demo中的Ajax来学习几种前端跨域方法。&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.yinfengblog.com/categories/JavaScript/"/>
    
    
      <category term="跨域" scheme="http://www.yinfengblog.com/tags/%E8%B7%A8%E5%9F%9F/"/>
    
  </entry>
  
  <entry>
    <title>不会输的井字棋</title>
    <link href="http://www.yinfengblog.com/%E4%B8%8D%E4%BC%9A%E8%BE%93%E7%9A%84%E4%BA%95%E5%AD%97%E6%A3%8B/"/>
    <id>http://www.yinfengblog.com/不会输的井字棋/</id>
    <published>2017-01-26T06:56:53.000Z</published>
    <updated>2017-01-27T16:39:32.822Z</updated>
    
    <content type="html"><![CDATA[<h3 id="JavaScript练手项目——带有AI的井字棋"><a href="#JavaScript练手项目——带有AI的井字棋" class="headerlink" title="JavaScript练手项目——带有AI的井字棋"></a>JavaScript练手项目——<a href="http://yinfengblog.com/Tic-Tac-Toe/" target="_blank" rel="external">带有AI的井字棋</a></h3><a id="more"></a> 
<p>井字棋是一个很简单的游戏，通过穷举，我们轻易的记录井字棋所有可能的走法。因此我们的AI可以实现的能力是</p>
<p><strong>先手：尽可能的赢棋</strong></p>
<p><strong>后手：保证不输棋，且在玩家出现失误的情况下赢棋</strong></p>
<h3 id="游戏基本功能"><a href="#游戏基本功能" class="headerlink" title="游戏基本功能"></a>游戏基本功能</h3><p>1.有一个下棋（落子）的函数</p>
<p>2.有一个判断胜负的函数</p>
<h3 id="AI部分"><a href="#AI部分" class="headerlink" title="AI部分"></a>AI部分</h3><p><em>穷举后，可知</em></p>
<p>作为先手，只要占下一个拐角，玩家在剩下的8个位置中，有7个是必输的。剩下的一种方式，也最多只是平手。</p>
<p>作为后手则更加简单，无论玩家怎么开局，只要AI走对了前两步棋，后面就只要专门拦住玩家的棋即可。</p>
<p>所以需要</p>
<p>1.根据玩家下子的情况，让AI下特定的位置（只需两步）。</p>
<p><strong>2.有一个进攻函数来连成三子取得胜利，用于抓住玩家的失误或者防止玩家放水。有一个防守函数来拦住玩家的棋子，使之不能连成三子。</strong></p>
<p>3.有一个随机下子函数来在要平局的情况下填满棋盘。</p>
<p>优先级：进攻&gt;防守&gt;随机</p>
<hr>

<p><strong> 戳<a href="http://yinfengblog.com/Tic-Tac-Toe/" target="_blank" rel="external">这里</a>试用 </strong></p>
<h3 id="部分JS代码："><a href="#部分JS代码：" class="headerlink" title="部分JS代码："></a>部分JS代码：</h3><p>棋盘数组，用于判断胜负和进攻防守函数。<br><code>arr = [[0, 1, 2],[0, 3, 6],[1, 4, 7],[2, 5, 8],[3, 4, 5],[6, 7, 8],[0, 4, 8],[2, 4, 6]]</code></p>
<p>判断胜负函数<em>(棋子设置了自定义属性，只要任意一条线上拼接起来为”111”则代表连成一线，由于玩家不会赢，不需要判断玩家是否胜利)</em><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkSituation</span>(<span class="params"></span>) </span>&#123;</div><div class="line">     <span class="keyword">if</span> (arr.some(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</div><div class="line">             <span class="keyword">return</span> concatBox(item) == <span class="string">"111"</span>;</div><div class="line">         &#125;)) &#123;</div><div class="line">         result(<span class="string">"你输了 :-("</span>);</div><div class="line">     &#125; <span class="keyword">else</span> <span class="keyword">if</span> ($(<span class="string">"button[disabled]"</span>).length === <span class="number">9</span>) &#123;</div><div class="line">         result(<span class="string">"平局"</span>);</div><div class="line">     &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p>进攻函数，防守函数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//  "0"为空子，"1"为AI棋子，"-1"为玩家棋子</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">attack</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (concatBox(arr)) &#123;</div><div class="line">            <span class="keyword">case</span> <span class="string">"011"</span>:</div><div class="line">                aiClick(arr[<span class="number">0</span>]);</div><div class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">            <span class="keyword">case</span> <span class="string">"101"</span>:</div><div class="line">                aiClick(arr[<span class="number">1</span>]);</div><div class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">            <span class="keyword">case</span> <span class="string">"110"</span>:</div><div class="line">                aiClick(arr[<span class="number">2</span>]);</div><div class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">defense</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (concatBox(arr)) &#123;</div><div class="line">            <span class="keyword">case</span> <span class="string">"0-1-1"</span>:</div><div class="line">                aiClick(arr[<span class="number">0</span>]);</div><div class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">            <span class="keyword">case</span> <span class="string">"-10-1"</span>:</div><div class="line">                aiClick(arr[<span class="number">1</span>]);</div><div class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">            <span class="keyword">case</span> <span class="string">"-1-10"</span>:</div><div class="line">                aiClick(arr[<span class="number">2</span>]);</div><div class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>AI下棋函数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">aiRound</span>(<span class="params"></span>) </span>&#123;</div><div class="line"><span class="comment">//  连三子</span></div><div class="line">    <span class="keyword">if</span> (arr.some(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> attack(item);</div><div class="line">        &#125;)) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"><span class="comment">//  拦住玩家三子</span></div><div class="line">    <span class="keyword">if</span> (arr.some(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> defense(item);</div><div class="line">        &#125;)) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"><span class="comment">//  AI先手</span></div><div class="line">    <span class="keyword">if</span> (AI === <span class="string">"X"</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (aiSteps === <span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">switch</span> (<span class="literal">true</span>) &#123;</div><div class="line">                <span class="keyword">case</span> box(<span class="number">1</span>) == <span class="number">-1</span> || box(<span class="number">3</span>) == <span class="number">-1</span>:</div><div class="line">                    Xcase = <span class="string">"1"</span>;</div><div class="line">                    aiClick(<span class="number">4</span>);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> box(<span class="number">2</span>) == <span class="number">-1</span> || box(<span class="number">6</span>) == <span class="number">-1</span>:</div><div class="line">                    Xcase = <span class="string">"2"</span>;</div><div class="line">                    aiClick(<span class="number">8</span>);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> box(<span class="number">5</span>) == <span class="number">-1</span> || box(<span class="number">7</span>) == <span class="number">-1</span>:</div><div class="line">                    Xcase = <span class="string">"3"</span>;</div><div class="line">                    aiClick(<span class="number">4</span>);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> box(<span class="number">8</span>) == <span class="number">-1</span>:</div><div class="line">                    Xcase = <span class="string">"4"</span>;</div><div class="line">                    aiClick(<span class="number">2</span>);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">default</span>:</div><div class="line">                    aiClick(<span class="number">8</span>);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (aiSteps === <span class="number">2</span>) &#123;</div><div class="line">            <span class="keyword">switch</span> (Xcase) &#123;</div><div class="line">                <span class="keyword">case</span> <span class="string">"1"</span>:</div><div class="line">                    <span class="keyword">if</span> (box(<span class="number">3</span>) == <span class="number">-1</span>) &#123; aiClick(<span class="number">2</span>); &#125; <span class="keyword">else</span> &#123; aiClick(<span class="number">6</span>); &#125;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> <span class="string">"2"</span>:</div><div class="line">                    <span class="keyword">if</span> (box(<span class="number">2</span>) == <span class="number">-1</span>) &#123; aiClick(<span class="number">6</span>); &#125; <span class="keyword">else</span> &#123; aiClick(<span class="number">2</span>); &#125;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> <span class="string">"3"</span>:</div><div class="line">                    <span class="keyword">if</span> (box(<span class="number">5</span>) == <span class="number">-1</span>) &#123; aiClick(<span class="number">2</span>); &#125; <span class="keyword">else</span> &#123; aiClick(<span class="number">6</span>); &#125;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> <span class="string">"4"</span>:</div><div class="line">                    aiClick(<span class="number">6</span>);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"><span class="comment">//  AI后手</span></div><div class="line">    <span class="keyword">if</span> (AI === <span class="string">"O"</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (aiSteps === <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (box(<span class="number">4</span>) == <span class="number">-1</span>) &#123;</div><div class="line">                aiClick(<span class="number">0</span>);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                aiClick(<span class="number">4</span>);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (aiSteps === <span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (<span class="built_in">parseInt</span>(box(<span class="number">0</span>)) + <span class="built_in">parseInt</span>(box(<span class="number">2</span>)) + <span class="built_in">parseInt</span>(box(<span class="number">6</span>)) + <span class="built_in">parseInt</span>(box(<span class="number">8</span>)) == <span class="number">2</span>) &#123; aiClick(<span class="number">1</span>); &#125; </div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (twoBox(<span class="number">2</span>, <span class="number">3</span>) || twoBox(<span class="number">1</span>, <span class="number">6</span>) || twoBox(<span class="number">1</span>, <span class="number">3</span>)) &#123; aiClick(<span class="number">0</span>); &#125; </div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (twoBox(<span class="number">0</span>, <span class="number">5</span>) || twoBox(<span class="number">1</span>, <span class="number">8</span>) || twoBox(<span class="number">1</span>, <span class="number">5</span>)) &#123; aiClick(<span class="number">2</span>); &#125; </div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (twoBox(<span class="number">0</span>, <span class="number">7</span>) || twoBox(<span class="number">3</span>, <span class="number">8</span>) || twoBox(<span class="number">3</span>, <span class="number">7</span>)) &#123; aiClick(<span class="number">6</span>); &#125; </div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (twoBox(<span class="number">5</span>, <span class="number">7</span>) || twoBox(<span class="number">5</span>, <span class="number">6</span>) || twoBox(<span class="number">2</span>, <span class="number">7</span>)) &#123; aiClick(<span class="number">8</span>); &#125; </div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (twoBox(<span class="number">0</span>, <span class="number">8</span>) || twoBox(<span class="number">2</span>, <span class="number">6</span>)) &#123; aiClick(<span class="number">1</span>); &#125; </div><div class="line">            <span class="keyword">else</span> &#123; aiClick(<span class="number">2</span>); &#125;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (aiSteps === <span class="number">2</span> || aiSteps === <span class="number">3</span>) &#123; randomStep(); &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;JavaScript练手项目——带有AI的井字棋&quot;&gt;&lt;a href=&quot;#JavaScript练手项目——带有AI的井字棋&quot; class=&quot;headerlink&quot; title=&quot;JavaScript练手项目——带有AI的井字棋&quot;&gt;&lt;/a&gt;JavaScript练手项目——&lt;a href=&quot;http://yinfengblog.com/Tic-Tac-Toe/&quot;&gt;带有AI的井字棋&lt;/a&gt;&lt;/h3&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.yinfengblog.com/categories/JavaScript/"/>
    
    
      <category term="demo" scheme="http://www.yinfengblog.com/tags/demo/"/>
    
  </entry>
  
  <entry>
    <title>FCC中级编程题整理</title>
    <link href="http://www.yinfengblog.com/FCC%E4%B8%AD%E7%BA%A7%E7%AE%97%E6%B3%95%E9%A2%98%E6%95%B4%E7%90%86/"/>
    <id>http://www.yinfengblog.com/FCC中级算法题整理/</id>
    <published>2017-01-23T05:33:21.000Z</published>
    <updated>2017-02-19T12:26:19.923Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.freecodecamp.cn/" target="_blank">freeCodeCamp</a>中级算法题整理解析。<br><a id="more"></a> </p>
<h2 id="Sum-All-Numbers-in-a-Range"><a href="#Sum-All-Numbers-in-a-Range" class="headerlink" title="Sum All Numbers in a Range"></a>Sum All Numbers in a Range</h2><p>我们会传递给你一个包含两个数字的数组。返回这两个数字和它们之间所有数字的和。</p>
<p>下面的方法使用 apply 方法寻找一个数值数组中的最大元素。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMaxOfArray</span>(<span class="params">numArray</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.max.apply(<span class="literal">null</span>, numArray);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>或者通过使用最新的扩展语句<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Spread_operator" target="_blank">spread operator</a>，获得数组中的最大值变得更容易。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</div><div class="line"><span class="keyword">var</span> max = <span class="built_in">Math</span>.max(...arr);</div></pre></td></tr></table></figure></p>
<p>本题答案：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sumAll</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> max = <span class="built_in">Math</span>.max(...arr);</div><div class="line">    <span class="keyword">var</span> min = <span class="built_in">Math</span>.min(...arr);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> value = min; min &lt; max; min++) &#123; value += min + <span class="number">1</span>; &#125;</div><div class="line">    <span class="keyword">return</span> value;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Diff-Two-Arrays"><a href="#Diff-Two-Arrays" class="headerlink" title="Diff Two Arrays"></a>Diff Two Arrays</h2><p>比较两个数组，然后返回一个新数组，该数组的元素为两个给定数组中所有独有的数组元素。换言之，返回两个数组的差异。</p>
<p>遍历第一个数组，如果第二个数组中存在与第一个数组重复的元素，则删除。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">diff</span>(<span class="params">arr1, arr2</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> newArr = arr1.concat(arr2);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = arr1.length; i &lt; len; i++) &#123;</div><div class="line">        <span class="keyword">var</span> index1 = newArr.indexOf(arr1[i]); <span class="comment">//找到元素</span></div><div class="line">        <span class="keyword">var</span> index2 = newArr.indexOf(arr1[i], index1 + <span class="number">1</span>); <span class="comment">//找到重复元素</span></div><div class="line">        <span class="keyword">if</span> (index2 != <span class="number">-1</span>) &#123; <span class="comment">//如果存在重复，则删除</span></div><div class="line">            newArr.splice(index1, <span class="number">1</span>);</div><div class="line">            newArr.splice(index2 - <span class="number">1</span>, <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> newArr;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>本题使用ES6更加简单<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">diffArray</span>(<span class="params">arr1, arr2</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> arr1</div><div class="line">      .filter(<span class="function"><span class="params">el</span> =&gt;</span> !arr2.includes(el))</div><div class="line">      .concat(</div><div class="line">        arr2.filter(<span class="function"><span class="params">el</span> =&gt;</span> !arr1.includes(el))</div><div class="line">      )</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Roman-Numeral-Converter"><a href="#Roman-Numeral-Converter" class="headerlink" title="Roman Numeral Converter"></a>Roman Numeral Converter</h2><p>将给定的数字转换成罗马数字。<br>所有返回的 罗马数字 都应该是大写形式。</p>
<p>这题关键是弄清楚罗马数字的书写思路，根据”M”,”CM”等特殊值与阿拉伯数字的对应关系，总结出阿拉伯数字转换成罗马数字的转换方法，再使用JavaScript将自己总结的转换方法表达出来即可。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">convert</span>(<span class="params">num</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> decimalValue = [<span class="number">1000</span>, <span class="number">900</span>, <span class="number">500</span>, <span class="number">400</span>, <span class="number">100</span>, <span class="number">90</span>, <span class="number">50</span>, <span class="number">40</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">1</span>];</div><div class="line">    <span class="keyword">var</span> romanNumeral = [<span class="string">'M'</span>, <span class="string">'CM'</span>, <span class="string">'D'</span>, <span class="string">'CD'</span>, <span class="string">'C'</span>, <span class="string">'XC'</span>, <span class="string">'L'</span>, <span class="string">'XL'</span>, <span class="string">'X'</span>, <span class="string">'IX'</span>, <span class="string">'V'</span>, <span class="string">'IV'</span>, <span class="string">'I'</span>];</div><div class="line">    <span class="keyword">var</span> sum = <span class="string">""</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = decimalValue.length; i &lt; len; i++) &#123;</div><div class="line">        <span class="keyword">while</span> (decimalValue[i] &lt;= num) &#123;</div><div class="line">            sum += romanNumeral[i];</div><div class="line">            num -= decimalValue[i];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> sum;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Where-art-thou"><a href="#Where-art-thou" class="headerlink" title="Where art thou"></a>Where art thou</h2><p>写一个 function，它遍历一个对象数组（第一个参数）并返回一个包含相匹配的属性-值对（第二个参数）的所有对象的数组。如果返回的数组中包含 source 对象的属性-值对，那么此对象的每一个属性-值对都必须存在于 collection 的对象中。</p>
<p>例如，如果第一个参数是 <code>[{ first: &quot;Romeo&quot;, last: &quot;Montague&quot; }, { first: &quot;Mercutio&quot;, last: null }, { first: &quot;Tybalt&quot;, last: &quot;Capulet&quot; }]</code>，第二个参数是 <code>{ last: &quot;Capulet&quot; }</code>，那么你必须从数组（第一个参数）返回其中的第三个对象，因为它包含了作为第二个参数传递的属性-值对。</p>
<p>使用<code>filter()</code>方法，同时遍历source对象的属性-值对，将对象数组中不符合要求的对象剔除。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">where</span>(<span class="params">collection, source</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> collection.filter(<span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> pro <span class="keyword">in</span> source) &#123;</div><div class="line">            <span class="keyword">if</span> (!obj.hasOwnProperty(pro) || obj[pro] !== source[pro]) &#123;    <span class="comment">// 若对象没有指定属性，或属性不等于指定值</span></div><div class="line">                <span class="keyword">return</span> <span class="literal">false</span>; &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Search-and-Replace"><a href="#Search-and-Replace" class="headerlink" title="Search and Replace"></a>Search and Replace</h2><p>使用给定的参数对句子执行一次查找和替换，然后返回新句子。</p>
<p>第一个参数是将要对其执行查找和替换的句子。</p>
<p>第二个参数是将被替换掉的单词（替换前的单词）。</p>
<p>第三个参数用于替换第二个参数（替换后的单词）。</p>
<p>注意：替换时保持原单词的大小写。例如，如果你想用单词 “dog” 替换单词 “Book” ，你应该替换成 “Dog”。</p>
<p>使用<code>replace()</code>方法替换<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myReplace</span>(<span class="params">str, before, after</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> index = str.indexOf(before);    <span class="comment">// 找到被替换单词位置</span></div><div class="line">    <span class="keyword">if</span> (str.charCodeAt(index) &lt; <span class="number">92</span>) &#123; after = after[<span class="number">0</span>].toUpperCase() + after.slice(<span class="number">1</span>); &#125;    <span class="comment">// 若被替换单词首字母大写</span></div><div class="line">    <span class="keyword">return</span> str.replace(before, after);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Pig-Latin"><a href="#Pig-Latin" class="headerlink" title="Pig Latin"></a>Pig Latin</h2><p>把指定的字符串翻译成 pig latin。</p>
<p>Pig Latin 把一个英文单词的第一个辅音或辅音丛（consonant cluster）移到词尾，然后加上后缀 “ay”。</p>
<p>如果单词以元音开始，你只需要在词尾添加 “way” 就可以了。</p>
<p>用正则匹配元音和辅音从<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">translate</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (str.match(<span class="regexp">/^[aeiou]/</span>)) &#123;    <span class="comment">// 用/^[aeiou]/匹配在开头的元音字母     </span></div><div class="line">        <span class="keyword">return</span> str + <span class="string">"way"</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> str.replace(<span class="regexp">/(^[^aeiou]+)/</span>, <span class="string">""</span>) + <span class="built_in">RegExp</span>.$<span class="number">1</span> + <span class="string">"ay"</span>;    <span class="comment">// 用/(^[^aeiou]+)/匹配第一个辅音或辅音丛，RegExp.$1用于存储第一个匹配的捕获组</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="DNA-Pairing"><a href="#DNA-Pairing" class="headerlink" title="DNA Pairing"></a>DNA Pairing</h2><p>DNA 链缺少配对的碱基。依据每一个碱基，为其找到配对的碱基，然后将结果作为第二个数组返回。</p>
<p>Base pairs（碱基对） 是一对 AT 和 CG，为给定的字母匹配缺失的碱基。</p>
<p>在每一个数组中将给定的字母作为第一个碱基返回。</p>
<p>1.写一个碱基配对的函数。2.将字符串转化成数组然后使用<code>forEach()</code>方法即可。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">pair</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> arr = [];</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">basePairs</span>(<span class="params">arg</span>) </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (arg) &#123;</div><div class="line">            <span class="keyword">case</span> <span class="string">"A"</span>:</div><div class="line">                arr.push([<span class="string">"A"</span>, <span class="string">"T"</span>]);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="string">"T"</span>:</div><div class="line">                arr.push([<span class="string">"T"</span>, <span class="string">"A"</span>]);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="string">"C"</span>:</div><div class="line">                arr.push([<span class="string">"C"</span>, <span class="string">"G"</span>]);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                arr.push([<span class="string">"G"</span>, <span class="string">"C"</span>]);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    str.split(<span class="string">""</span>).forEach(basePairs);</div><div class="line">    <span class="keyword">return</span> arr;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Missing-letters"><a href="#Missing-letters" class="headerlink" title="Missing letters"></a>Missing letters</h2><p>从传递进来的字母序列中找到缺失的字母并返回它。</p>
<p>如果所有字母都在序列中，返回 undefined。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fearNotLetter</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> num = str.charCodeAt(<span class="number">0</span>);</div><div class="line">    <span class="keyword">var</span> arr = str.split(<span class="string">""</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>, len = arr.length; i &lt; len; i++) &#123;   <span class="comment">//逐个比较字母</span></div><div class="line">        <span class="keyword">var</span> a = <span class="built_in">String</span>.fromCharCode(num + i);</div><div class="line">        <span class="keyword">if</span> (arr[i] != a) &#123;  <span class="comment">//发现缺失，返回结果</span></div><div class="line">            <span class="keyword">return</span> a;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">undefined</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Boo-who"><a href="#Boo-who" class="headerlink" title="Boo who"></a>Boo who</h2><p>检查一个值是否是基本布尔类型，并返回 true 或 false。</p>
<p>基本布尔类型即 true 和 false。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">boo</span>(<span class="params">bool</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> bool === <span class="string">"boolean"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Sorted-Union"><a href="#Sorted-Union" class="headerlink" title="Sorted Union"></a>Sorted Union</h2><p>写一个 function，传入两个或两个以上的数组，返回一个以给定的原始数组排序的不包含重复值的新数组。</p>
<p>拼接所有数组，遍历数组并去除重复数字。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">unite</span>(<span class="params">arr1, arr2, arr3</span>) </span>&#123;</div><div class="line">    <span class="comment">// slice()方法可以用来将一个类数组（Array-like）对象/集合转换成一个数组。你只需将该方法绑定到这个对象上</span></div><div class="line">    <span class="keyword">var</span> argArr = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</div><div class="line">    <span class="comment">// 拼接所有数组</span></div><div class="line">    <span class="keyword">var</span> arr = argArr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">arrA, arrB</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> arrA.concat(arrB);</div><div class="line">    &#125;);</div><div class="line">    <span class="comment">// index函数返回两个重复数字中后一个数的索引</span></div><div class="line">    <span class="keyword">var</span> index = <span class="function"><span class="keyword">function</span>(<span class="params">arg</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> arr.indexOf(arr[arg], arg + <span class="number">1</span>);</div><div class="line">    &#125;;</div><div class="line">    <span class="comment">// 去除重复数字</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = arr.length; i &lt; len; i++) &#123;</div><div class="line">        <span class="keyword">while</span> (index(i) != <span class="number">-1</span>) &#123; arr.splice(index(i), <span class="number">1</span>); &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> arr;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Convert-HTML-Entities"><a href="#Convert-HTML-Entities" class="headerlink" title="Convert HTML Entities"></a>Convert HTML Entities</h2><p>将字符串中的字符 &amp;、&lt;、&gt;、” （双引号）, 以及 ‘ （单引号）转换为它们对应的 HTML 实体。</p>
<p>直接替换即可。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">convert</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> str.replace(<span class="regexp">/&amp;/g</span>, <span class="string">"&amp;amp;"</span>).replace(<span class="regexp">/&lt;/g</span>, <span class="string">"&amp;lt;"</span>).replace(<span class="regexp">/&gt;/g</span>, <span class="string">"&amp;gt;"</span>).replace(<span class="regexp">/'/g</span>, <span class="string">"&amp;apos;"</span>).replace(<span class="regexp">/"/g</span>, <span class="string">"&amp;quot;"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>对于更多的字符替换，应创建对象。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">convert</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">    htmlEntities = &#123;</div><div class="line">        <span class="string">'&amp;'</span>: <span class="string">'&amp;amp;'</span>,</div><div class="line">        <span class="string">'&lt;'</span>: <span class="string">'&amp;lt;'</span>,</div><div class="line">        <span class="string">'&gt;'</span>: <span class="string">'&amp;gt;'</span>,</div><div class="line">        <span class="string">'\"'</span>: <span class="string">'&amp;quot;'</span>,</div><div class="line">        <span class="string">'\''</span>: <span class="string">"&amp;apos;"</span></div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">return</span> str.split(<span class="string">''</span>).map(<span class="function"><span class="keyword">function</span>(<span class="params">entity</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> htmlEntities[entity] || entity;  <span class="comment">// 在字符串中找到了要替换的字符，则替换。</span></div><div class="line">    &#125;).join(<span class="string">''</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Spinal-Tap-Case"><a href="#Spinal-Tap-Case" class="headerlink" title="Spinal Tap Case"></a>Spinal Tap Case</h2><p>将字符串转换为 spinal case。Spinal case 是 all-lowercase-words-joined-by-dashes 这种形式的，也就是以连字符连接所有小写单词。</p>
<p>关键是 <code>spinalCase(&quot;This Is Spinal Tap&quot;)</code> 应该返回 <code>&quot;this-is-spinal-tap&quot;</code>。<br>可以使用正向预搜索：<code>(?=xxxxx)</code>。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">spinalCase</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> str.split(<span class="regexp">/\s|_|(?=[A-Z])/</span>).join(<span class="string">"-"</span>).toLowerCase();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Sum-All-Odd-Fibonacci-Numbers"><a href="#Sum-All-Odd-Fibonacci-Numbers" class="headerlink" title="Sum All Odd Fibonacci Numbers"></a>Sum All Odd Fibonacci Numbers</h2><p>给一个正整数num，返回小于或等于num的斐波纳契奇数之和。</p>
<p>提示：此题不能用递归来实现斐波纳契数列。因为当num较大时，内存会溢出，推荐用数组来实现。</p>
<p>使用数组缓存方法得到斐波纳契数列。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sumFibs</span>(<span class="params">num</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> fib = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> cache = [<span class="number">1</span>, <span class="number">1</span>];</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (n &gt;= cache.length) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = cache.length; i &lt; n ; i++ ) &#123;</div><div class="line">                cache[i] = cache[i - <span class="number">2</span>] + cache[i - <span class="number">1</span>];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> cache[n - <span class="number">1</span>];</div><div class="line">    &#125;;</div><div class="line">&#125;();</div><div class="line">    <span class="keyword">var</span> sum = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">1</span>; fib(j) &lt;= num; j++) &#123;</div><div class="line">        <span class="keyword">if</span> (fib(j) % <span class="number">2</span>) &#123; sum += fib(j); &#125; &#125;</div><div class="line">    <span class="keyword">return</span> sum;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Sum-All-Primes"><a href="#Sum-All-Primes" class="headerlink" title="Sum All Primes"></a>Sum All Primes</h2><p>求小于等于给定数值的质数之和。</p>
<p>只有 1 和它本身两个约数的数叫质数。例如，2 是质数，因为它只能被 1 和 2 整除。1 不是质数，因为它只能被自身整除。</p>
<p>给定的数不一定是质数。</p>
<p>判断质数，2是质数，其余被2整除的都不是质数，然后依次判断是否能被奇数整除，最大循环为数值的开方。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPrime</span>(<span class="params">num</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (num % <span class="number">2</span> === <span class="number">0</span> &amp;&amp; num !== <span class="number">2</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>; &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">3</span>; i &lt;= <span class="built_in">Math</span>.sqrt(num); i += <span class="number">2</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (num % i === <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sumPrimes</span>(<span class="params">num</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> sum = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">2</span>; i &lt;= num; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (isPrime(i)) &#123;</div><div class="line">            sum += i;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> sum;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Smallest-Common-Multiple"><a href="#Smallest-Common-Multiple" class="headerlink" title="Smallest Common Multiple"></a>Smallest Common Multiple</h2><p>找出能被两个给定参数和它们之间的连续数字整除的最小公倍数。</p>
<p>范围是两个数字构成的数组，两个数字不一定按数字顺序排序。</p>
<p>用辗转相除法确定两个正整数 a 和 b(a≥b) 的最大公因数gcd(a,b)：当a mod b=0 时gcd(a,b)=b,否则gcd(a,b) = gcd(b,a mod b)递归或循环运算得出结果。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">smallestCommons</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">    <span class="comment">// 辗转相除法求最大公约数</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">gcd</span>(<span class="params">a, b</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (a % b === <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span> b;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> gcd(b, a % b);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 求最小公倍数</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">scm</span>(<span class="params">c, d</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> c * d / gcd(c, d);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> max = <span class="built_in">Math</span>.max(...arr);</div><div class="line">    <span class="keyword">var</span> min = <span class="built_in">Math</span>.min(...arr);</div><div class="line">    <span class="keyword">var</span> num = min;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= max - min; i++) &#123;</div><div class="line">        num = scm(num, min + i);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> num;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Finders-Keepers"><a href="#Finders-Keepers" class="headerlink" title="Finders Keepers"></a>Finders Keepers</h2><p>写一个 function，它浏览数组（第一个参数）并返回数组中第一个通过某种方法（第二个参数）验证的元素。</p>
<p>使用<code>filter()</code>方法。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">find</span>(<span class="params">arr, func</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> arr.filter(func)[<span class="number">0</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Drop-it"><a href="#Drop-it" class="headerlink" title="Drop it"></a>Drop it</h2><p>让我们来丢弃数组(arr)的元素，从左边开始，直到回调函数return true就停止。</p>
<p>第二个参数，func，是一个函数。用来测试数组的第一个元素，如果返回fasle，就从数组中抛出该元素(注意：此时数组已被改变)，继续测试数组的第一个元素，如果返回fasle，继续抛出，直到返回true。</p>
<p>最后返回数组的剩余部分，如果没有剩余，就返回一个空数组。</p>
<p><code>drop([1, 2, 3, 4], function(n) {return n &gt;= 3;})</code> 应该返回 <code>[3, 4]</code>。 </p>
<p><code>arr.filter(func)</code>可得到筛选后的数组。然后判断能arr中是否存在筛选后数组的第一项。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">drop</span>(<span class="params">arr, func</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> index = arr.indexOf(arr.filter(func)[<span class="number">0</span>]);    </div><div class="line">    <span class="keyword">return</span> index == <span class="number">-1</span> ? [] : arr.slice(index);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Steamroller"><a href="#Steamroller" class="headerlink" title="Steamroller"></a>Steamroller</h2><p>对嵌套的数组进行扁平化处理。你必须考虑到不同层级的嵌套。</p>
<p><code>steamroller([1, [2], [3, [[4]]]])</code> 应该返回 <code>[1, 2, 3, 4]</code>。 </p>
<p><code>steamroller([1, {}, [3, [[4]]]])</code> 应该返回 <code>[1, {}, 3, 4]</code>。 </p>
<p>写一个扁平化处理的函数，将非数组的项收集到一个新数组，对于数组项，循环调用该函数。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">steamroller</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> newArr = [];</div><div class="line">    <span class="keyword">var</span> flatten = <span class="function"><span class="keyword">function</span>(<span class="params">arg</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!<span class="built_in">Array</span>.isArray(arg)) &#123; newArr.push(arg); &#125; <span class="keyword">else</span> &#123; arg.forEach(flatten); &#125;</div><div class="line">    &#125;;</div><div class="line">    arr.forEach(flatten);</div><div class="line">    <span class="keyword">return</span> newArr;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Binary-Agents"><a href="#Binary-Agents" class="headerlink" title="Binary Agents"></a>Binary Agents</h2><p>传入二进制字符串，翻译成英语句子并返回。</p>
<p>二进制字符串是以空格分隔的。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">binaryAgent</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">    biString = str.split(<span class="string">' '</span>);</div><div class="line">    <span class="keyword">var</span> uniString = [];</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>,len=biString.length; i &lt; len; i++) &#123;</div><div class="line">        uniString.push(<span class="built_in">String</span>.fromCharCode(<span class="built_in">parseInt</span>(biString[i], <span class="number">2</span>)));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> uniString.join(<span class="string">""</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Everything-Be-True"><a href="#Everything-Be-True" class="headerlink" title="Everything Be True"></a>Everything Be True</h2><p>完善编辑器中的every函数，如果集合(collection)中的所有对象都存在对应的属性(pre)，并且属性(pre)对应的值为真。函数返回ture。反之，返回false。</p>
<p>使用<code>every()</code>方法。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">every</span>(<span class="params">collection, pre</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> collection.every(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> item.hasOwnProperty(pre) &amp;&amp; item[pre];</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Arguments-Optional"><a href="#Arguments-Optional" class="headerlink" title="Arguments Optional"></a>Arguments Optional</h2><p>创建一个计算两个参数之和的 function。如果只有一个参数，则返回一个 function，该 function 请求一个参数然后返回求和的结果。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//检查参数是否为有效数字</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">checkNum</span>(<span class="params">num</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> num != <span class="string">"number"</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">undefined</span>; &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> num; &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//一个参数情况</span></div><div class="line">    <span class="keyword">if</span> (<span class="built_in">arguments</span>.length == <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">var</span> a = checkNum(<span class="built_in">arguments</span>[<span class="number">0</span>]);</div><div class="line">        <span class="keyword">if</span> (a) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">arg</span>) </span>&#123;</div><div class="line">                <span class="keyword">if</span> (checkNum(arg)) &#123;</div><div class="line">                    <span class="keyword">return</span> a + arg; &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="keyword">return</span> <span class="literal">undefined</span>; &#125;</div><div class="line">            &#125;;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">undefined</span>; &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//其他情况</span></div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">arguments</span>.length &gt; <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">var</span> b = checkNum(<span class="built_in">arguments</span>[<span class="number">0</span>]);</div><div class="line">        <span class="keyword">var</span> c = checkNum(<span class="built_in">arguments</span>[<span class="number">1</span>]);</div><div class="line">        <span class="keyword">if</span> (b &amp;&amp; c) &#123;</div><div class="line">            <span class="keyword">return</span> b + c; &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">undefined</span>; &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>参考资料：<a href="https://forum.freecodecamp.com/c/wiki" target="_blank" rel="external">https://forum.freecodecamp.com/c/wiki</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.freecodecamp.cn/&quot; target=&quot;_blank&quot;&gt;freeCodeCamp&lt;/a&gt;中级算法题整理解析。&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.yinfengblog.com/categories/JavaScript/"/>
    
    
      <category term="编程练习" scheme="http://www.yinfengblog.com/tags/%E7%BC%96%E7%A8%8B%E7%BB%83%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>FCC初级编程题整理</title>
    <link href="http://www.yinfengblog.com/FCC%E5%88%9D%E7%BA%A7%E7%AE%97%E6%B3%95%E9%A2%98%E6%95%B4%E7%90%86/"/>
    <id>http://www.yinfengblog.com/FCC初级算法题整理/</id>
    <published>2017-01-19T08:06:37.000Z</published>
    <updated>2017-02-19T12:26:17.247Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.freecodecamp.cn/" target="_blank">freeCodeCamp</a>前端部分快完成了。来整理一下<a href="https://www.freecodecamp.cn/" target="_blank">freeCodeCamp</a>的算法题。这些题都相对简单，用来熟悉API的使用。这篇文章选了部分初级算法题进行整理。<br><a id="more"></a><br>这些是初学时做的题，毕竟当时写的代码太蠢<em>(:з)∠)</em>，有些改成了更好的写法。</p>
<h2 id="Reverse-a-String-翻转字符串"><a href="#Reverse-a-String-翻转字符串" class="headerlink" title="Reverse a String(翻转字符串)"></a>Reverse a String(翻转字符串)</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">reverseString</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> str.split(<span class="string">""</span>).reverse().join(<span class="string">""</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Factorialize-a-Number-阶乘"><a href="#Factorialize-a-Number-阶乘" class="headerlink" title="Factorialize a Number(阶乘)"></a>Factorialize a Number(阶乘)</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">factorialize</span>(<span class="params">num</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (num === <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>; &#125;</div><div class="line">    <span class="keyword">return</span> num * factorialize(num - <span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Check-for-Palindromes-回文检测"><a href="#Check-for-Palindromes-回文检测" class="headerlink" title="Check for Palindromes(回文检测)"></a>Check for Palindromes(回文检测)</h2><p>  如果一个字符串忽略标点符号、大小写和空格，正着读和反着读一模一样，那么这个字符串就是palindrome(回文)。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">palindrome</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> originStr = str.replace(<span class="regexp">/[\W_]/g</span>, <span class="string">""</span>).toLowerCase(); <span class="comment">//  /[\W_]/g匹配所有的字母、数字以外的字符</span></div><div class="line">    <span class="keyword">var</span> newStr = originStr.split(<span class="string">""</span>).reverse().join(<span class="string">""</span>);</div><div class="line">    <span class="keyword">return</span> newStr === originStr;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Find-the-Longest-Word-in-a-String"><a href="#Find-the-Longest-Word-in-a-String" class="headerlink" title="Find the Longest Word in a String"></a>Find the Longest Word in a String</h2><p>  找到提供的句子中最长的单词，并计算它的长度。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">findLongestWord</span>(<span class="params">s</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> s.split(<span class="string">' '</span>)</div><div class="line">        .reduce(<span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="built_in">Math</span>.max(x, y.length);</div><div class="line">        &#125;, <span class="number">0</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Title-Case-a-Sentence-Incomplete"><a href="#Title-Case-a-Sentence-Incomplete" class="headerlink" title="Title Case a Sentence Incomplete   "></a>Title Case a Sentence Incomplete   </h2><p>  确保字符串的每个单词首字母都大写，其余部分小写。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">titleCase</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> str.toLowerCase().replace(<span class="regexp">/( |^)[a-z]/g</span>, (L) =&gt; L.toUpperCase());</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Truncate-a-String"><a href="#Truncate-a-String" class="headerlink" title="Truncate a String"></a>Truncate a String</h2><p>  如果字符串的长度比指定的参数num长，则把多余的部分用…来表示。插入到字符串尾部的三个点号也会计入字符串的长度。但是果指<br>定的参数num小于或等于3，则添加的三个点号不会计入字符串的长度。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">truncate</span>(<span class="params">str, num</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (num &lt;= <span class="number">3</span> &amp;&amp; str.length &gt; num) &#123; str = str.slice(<span class="number">0</span>, num) + <span class="string">"..."</span>; &#125; </div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (str.length &gt; num) &#123; str = str.slice(<span class="number">0</span>, num - <span class="number">3</span>) + <span class="string">"..."</span>; &#125;</div><div class="line">    <span class="keyword">return</span> str;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Mutations"><a href="#Mutations" class="headerlink" title="Mutations"></a>Mutations</h2><p>  如果数组第一个字符串元素包含了第二个字符串元素的所有字符，函数返回true。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">truncate</span>(<span class="params">str, num</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (num &lt;= <span class="number">3</span> &amp;&amp; str.length &gt; num) &#123; str = str.slice(<span class="number">0</span>, num) + <span class="string">"..."</span>; &#125; </div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (str.length &gt; num) &#123; str = str.slice(<span class="number">0</span>, num - <span class="number">3</span>) + <span class="string">"..."</span>; &#125;</div><div class="line">    <span class="keyword">return</span> str;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Seek-and-Destroy"><a href="#Seek-and-Destroy" class="headerlink" title="Seek and Destroy"></a>Seek and Destroy</h2><p>  实现一个摧毁(destroyer)函数，第一个参数是待摧毁的数组，其余的参数是待摧毁的值。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">destroyer</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> arg = <span class="built_in">arguments</span>;</div><div class="line">    <span class="keyword">return</span> arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>, len=arr.length; i &lt; len; i++) &#123;</div><div class="line">            <span class="keyword">if</span> (item == arg[i]) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Where-do-I-belong"><a href="#Where-do-I-belong" class="headerlink" title="Where do I belong"></a>Where do I belong</h2><p>  先给数组排序，然后找到指定的值在数组的位置，最后返回位置对应的索引。<br>  where([20,3,5], 19) 应该返回2。因为数组会先排序为[3,5,20]，19插入到数组[3,5,20]后变成[3,5,19,20]，而19对应的索引值就是2<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">where</span>(<span class="params">arr, num</span>) </span>&#123;</div><div class="line">    arr.push(num);</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">compare</span>(<span class="params">value1, value2</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> value1 - value2;</div><div class="line">    &#125;</div><div class="line">    arr.sort(compare);</div><div class="line">    <span class="keyword">return</span> arr.indexOf(num);    </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Caesars-Cipher"><a href="#Caesars-Cipher" class="headerlink" title="Caesars Cipher"></a>Caesars Cipher</h2><p>  下面我们来介绍风靡全球的凯撒密码Caesar cipher，又叫移位密码。移位密码也就是密码中的字母会按照指定的数量来做移位。<br>  一个常见的案例就是ROT13密码，字母会移位13个位置。由’A’ ↔ ‘N’, ‘B’ ↔ ‘O’，以此类推。<br>  写一个ROT13函数，实现输入加密字符串，输出解密字符串。<br>所有的字母都是大写，不要转化任何非字母形式的字符(例如：空格，标点符号)，遇到这些特殊字符，跳过它们。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">rot13</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> str.split(<span class="string">''</span>)</div><div class="line">        .map(<span class="function"><span class="keyword">function</span>(<span class="params">char</span>) </span>&#123;</div><div class="line">            x = char.charCodeAt(<span class="number">0</span>);</div><div class="line">            <span class="keyword">if</span> (x &lt; <span class="number">65</span> || x &gt; <span class="number">90</span>) &#123; </div><div class="line">                <span class="keyword">return</span> <span class="built_in">String</span>.fromCharCode(x);  <span class="comment">//非大写字母</span></div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (x &lt; <span class="number">78</span>) &#123; </div><div class="line">                <span class="keyword">return</span> <span class="built_in">String</span>.fromCharCode(x + <span class="number">13</span>);  <span class="comment">//前13个大写字母右移13位</span></div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> <span class="built_in">String</span>.fromCharCode(x - <span class="number">13</span>);  <span class="comment">//后13个大写字母左移13位</span></div><div class="line">        &#125;).join(<span class="string">''</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.freecodecamp.cn/&quot; target=&quot;_blank&quot;&gt;freeCodeCamp&lt;/a&gt;前端部分快完成了。来整理一下&lt;a href=&quot;https://www.freecodecamp.cn/&quot; target=&quot;_blank&quot;&gt;freeCodeCamp&lt;/a&gt;的算法题。这些题都相对简单，用来熟悉API的使用。这篇文章选了部分初级算法题进行整理。&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.yinfengblog.com/categories/JavaScript/"/>
    
    
      <category term="编程练习" scheme="http://www.yinfengblog.com/tags/%E7%BC%96%E7%A8%8B%E7%BB%83%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>基于Github Pages+Hexo的个人博客</title>
    <link href="http://www.yinfengblog.com/%E5%9F%BA%E4%BA%8EGithub%20Pages+Hexo%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://www.yinfengblog.com/基于Github Pages+Hexo的个人博客/</id>
    <published>2017-01-11T05:45:16.000Z</published>
    <updated>2017-01-23T05:26:10.179Z</updated>
    
    <content type="html"><![CDATA[<p>折腾了一天，搭建了一个简陋的博客，用来记录自己在学习前端过程中的思考总结。<br><a id="more"></a><br>  博客会记录自己对一些前端重要知识的思考，在FCC练习的总结和自己平时练手的项目。像我这种懒人就不会在博客美化UI和丰富功能上花太多精力了<em>(:з)∠)</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;折腾了一天，搭建了一个简陋的博客，用来记录自己在学习前端过程中的思考总结。&lt;br&gt;
    
    </summary>
    
      <category term="blog" scheme="http://www.yinfengblog.com/categories/blog/"/>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://www.yinfengblog.com/hello-world/"/>
    <id>http://www.yinfengblog.com/hello-world/</id>
    <published>2017-01-10T14:15:40.000Z</published>
    <updated>2017-01-26T06:58:24.523Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post.<br><a id="more"></a><br>Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post.&lt;br&gt;
    
    </summary>
    
      <category term="blog" scheme="http://www.yinfengblog.com/categories/blog/"/>
    
    
  </entry>
  
</feed>
