<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>和光同尘</title>
  <subtitle>前端小白的学习笔记</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yinfengblog.com/"/>
  <updated>2017-01-20T05:17:23.961Z</updated>
  <id>http://yinfengblog.com/</id>
  
  <author>
    <name>Yin Feng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>FCC初级算法题整理</title>
    <link href="http://yinfengblog.com/JavaScript/2017/01/19/FCC%E5%88%9D%E7%BA%A7%E7%AE%97%E6%B3%95%E9%A2%98%E6%95%B4%E7%90%86.html"/>
    <id>http://yinfengblog.com/JavaScript/2017/01/19/FCC初级算法题整理.html</id>
    <published>2017-01-19T08:06:37.000Z</published>
    <updated>2017-01-20T05:17:23.961Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.freecodecamp.cn/" target="_blank">freeCodeCamp</a>前端部分快完成了。来整理一下<a href="https://www.freecodecamp.cn/" target="_blank">freeCodeCamp</a>的算法题。这些题都相对简单，用来熟悉API的使用。这篇文章选了部分初级算法题进行整理。<br><a id="more"></a><br>这些是初学时做的题，毕竟当时写的代码太蠢<em>(:з)∠)</em>，有些改成了更好的写法。</p>
<h2 id="Reverse-a-String-翻转字符串"><a href="#Reverse-a-String-翻转字符串" class="headerlink" title="Reverse a String(翻转字符串)"></a>Reverse a String(翻转字符串)</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">reverseString</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> str.split(<span class="string">""</span>).reverse().join(<span class="string">""</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Factorialize-a-Number-阶乘"><a href="#Factorialize-a-Number-阶乘" class="headerlink" title="Factorialize a Number(阶乘)"></a>Factorialize a Number(阶乘)</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">factorialize</span>(<span class="params">num</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (num === <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>; &#125;</div><div class="line">    <span class="keyword">return</span> num * factorialize(num - <span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Check-for-Palindromes-回文检测"><a href="#Check-for-Palindromes-回文检测" class="headerlink" title="Check for Palindromes(回文检测)"></a>Check for Palindromes(回文检测)</h2><p>  如果一个字符串忽略标点符号、大小写和空格，正着读和反着读一模一样，那么这个字符串就是palindrome(回文)。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">palindrome</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> originStr = str.replace(<span class="regexp">/[\W_]/g</span>, <span class="string">""</span>).toLowerCase(); <span class="comment">//  /[\W_]/g匹配所有的字母、数字以外的字符</span></div><div class="line">    <span class="keyword">var</span> newStr = originStr.split(<span class="string">""</span>).reverse().join(<span class="string">""</span>);</div><div class="line">    <span class="keyword">return</span> newStr === originStr;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Find-the-Longest-Word-in-a-String"><a href="#Find-the-Longest-Word-in-a-String" class="headerlink" title="Find the Longest Word in a String"></a>Find the Longest Word in a String</h2><p>  找到提供的句子中最长的单词，并计算它的长度。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">findLongestWord</span>(<span class="params">s</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> s.split(<span class="string">' '</span>)</div><div class="line">        .reduce(<span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="built_in">Math</span>.max(x, y.length);</div><div class="line">        &#125;, <span class="number">0</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Title-Case-a-Sentence-Incomplete"><a href="#Title-Case-a-Sentence-Incomplete" class="headerlink" title="Title Case a Sentence Incomplete   "></a>Title Case a Sentence Incomplete   </h2><p>  确保字符串的每个单词首字母都大写，其余部分小写。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">titleCase</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> str.toLowerCase().replace(<span class="regexp">/( |^)[a-z]/g</span>, (L) =&gt; L.toUpperCase());</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Truncate-a-String"><a href="#Truncate-a-String" class="headerlink" title="Truncate a String"></a>Truncate a String</h2><p>  如果字符串的长度比指定的参数num长，则把多余的部分用…来表示。插入到字符串尾部的三个点号也会计入字符串的长度。但是果指<br>定的参数num小于或等于3，则添加的三个点号不会计入字符串的长度。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">truncate</span>(<span class="params">str, num</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (num &lt;= <span class="number">3</span> &amp;&amp; str.length &gt; num) &#123; str = str.slice(<span class="number">0</span>, num) + <span class="string">"..."</span>; &#125; </div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (str.length &gt; num) &#123; str = str.slice(<span class="number">0</span>, num - <span class="number">3</span>) + <span class="string">"..."</span>; &#125;</div><div class="line">    <span class="keyword">return</span> str;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Mutations"><a href="#Mutations" class="headerlink" title="Mutations"></a>Mutations</h2><p>  如果数组第一个字符串元素包含了第二个字符串元素的所有字符，函数返回true。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">truncate</span>(<span class="params">str, num</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (num &lt;= <span class="number">3</span> &amp;&amp; str.length &gt; num) &#123; str = str.slice(<span class="number">0</span>, num) + <span class="string">"..."</span>; &#125; </div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (str.length &gt; num) &#123; str = str.slice(<span class="number">0</span>, num - <span class="number">3</span>) + <span class="string">"..."</span>; &#125;</div><div class="line">    <span class="keyword">return</span> str;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Seek-and-Destroy"><a href="#Seek-and-Destroy" class="headerlink" title="Seek and Destroy"></a>Seek and Destroy</h2><p>  实现一个摧毁(destroyer)函数，第一个参数是待摧毁的数组，其余的参数是待摧毁的值。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">destroyer</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> arg = <span class="built_in">arguments</span>;</div><div class="line">    <span class="keyword">return</span> arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>, len=arr.length; i &lt; len; i++) &#123;</div><div class="line">            <span class="keyword">if</span> (item == arg[i]) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Where-do-I-belong"><a href="#Where-do-I-belong" class="headerlink" title="Where do I belong"></a>Where do I belong</h2><p>  先给数组排序，然后找到指定的值在数组的位置，最后返回位置对应的索引。<br>  where([20,3,5], 19) 应该返回2。因为数组会先排序为[3,5,20]，19插入到数组[3,5,20]后变成[3,5,19,20]，而19对应的索引值就是2<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">where</span>(<span class="params">arr, num</span>) </span>&#123;</div><div class="line">    arr.push(num);</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">compare</span>(<span class="params">value1, value2</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> value1 - value2;</div><div class="line">    &#125;</div><div class="line">    arr.sort(compare);</div><div class="line">    <span class="keyword">return</span> arr.indexOf(num);    </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Caesars-Cipher"><a href="#Caesars-Cipher" class="headerlink" title="Caesars Cipher"></a>Caesars Cipher</h2><p>  下面我们来介绍风靡全球的凯撒密码Caesar cipher，又叫移位密码。移位密码也就是密码中的字母会按照指定的数量来做移位。<br>  一个常见的案例就是ROT13密码，字母会移位13个位置。由’A’ ↔ ‘N’, ‘B’ ↔ ‘O’，以此类推。<br>  写一个ROT13函数，实现输入加密字符串，输出解密字符串。<br>所有的字母都是大写，不要转化任何非字母形式的字符(例如：空格，标点符号)，遇到这些特殊字符，跳过它们。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">rot13</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> str.split(<span class="string">''</span>)</div><div class="line">        .map(<span class="function"><span class="keyword">function</span>(<span class="params">char</span>) </span>&#123;</div><div class="line">            x = char.charCodeAt(<span class="number">0</span>);</div><div class="line">            <span class="keyword">if</span> (x &lt; <span class="number">65</span> || x &gt; <span class="number">90</span>) &#123; </div><div class="line">                <span class="keyword">return</span> <span class="built_in">String</span>.fromCharCode(x);  <span class="comment">//非大写字母</span></div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (x &lt; <span class="number">78</span>) &#123; </div><div class="line">                <span class="keyword">return</span> <span class="built_in">String</span>.fromCharCode(x + <span class="number">13</span>);  <span class="comment">//前13个大写字母右移13位</span></div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> <span class="built_in">String</span>.fromCharCode(x - <span class="number">13</span>);  <span class="comment">//后13个大写字母左移13位</span></div><div class="line">        &#125;).join(<span class="string">''</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.freecodecamp.cn/&quot; target=&quot;_blank&quot;&gt;freeCodeCamp&lt;/a&gt;前端部分快完成了。来整理一下&lt;a href=&quot;https://www.freecodecamp.cn/&quot; target=&quot;_blank&quot;&gt;freeCodeCamp&lt;/a&gt;的算法题。这些题都相对简单，用来熟悉API的使用。这篇文章选了部分初级算法题进行整理。&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://yinfengblog.com/categories/JavaScript/"/>
    
    
      <category term="算法" scheme="http://yinfengblog.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="API" scheme="http://yinfengblog.com/tags/API/"/>
    
  </entry>
  
  <entry>
    <title>我的第一篇文章</title>
    <link href="http://yinfengblog.com/blog/2017/01/11/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0.html"/>
    <id>http://yinfengblog.com/blog/2017/01/11/第一篇文章.html</id>
    <published>2017-01-11T05:45:16.000Z</published>
    <updated>2017-01-19T12:50:29.669Z</updated>
    
    <content type="html"><![CDATA[<p>折腾了一天，搭建了一个简陋的博客，用来记录自己在学习前端过程中的思考总结。<br><a id="more"></a><br>  博客会记录自己对一些前端重要知识的思考，在FCC练习的总结和自己平时练手的项目。像我这种懒人就不会在博客美化UI和丰富功能上花太多精力了<em>(:з)∠)</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;折腾了一天，搭建了一个简陋的博客，用来记录自己在学习前端过程中的思考总结。&lt;br&gt;
    
    </summary>
    
      <category term="blog" scheme="http://yinfengblog.com/categories/blog/"/>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yinfengblog.com/blog/2017/01/10/hello-world.html"/>
    <id>http://yinfengblog.com/blog/2017/01/10/hello-world.html</id>
    <published>2017-01-10T14:15:40.000Z</published>
    <updated>2017-01-19T12:51:48.113Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post.<br><a id="more"></a><br>Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post.&lt;br&gt;
    
    </summary>
    
      <category term="blog" scheme="http://yinfengblog.com/categories/blog/"/>
    
    
  </entry>
  
</feed>
